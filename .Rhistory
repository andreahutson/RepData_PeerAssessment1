library(simpleboot)
data(airquality)
attach(airquality)
rrise_teacher_demographics <- read.csv("~/Documents/RRISE 2013 Evaluation/rrise_teacher_demographics.csv")
View(rrise_teacher_demographics)
tapply(iris$Sepal.Length, iris$Species, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(mtcars, cyl, mean)
lapply(mtcars, mean)
lapply(x, mean)
x <- list(a = 1:5, b=rnorm(10))
lapply(x, mean)
lapply(x, runif, min=0, max=10)
x <- 1:4
lapply(x, runif, min=0, max=10)
x <- list(a= matrix(1:4, 2, 2), b=matrix(1:6, 3,2))
x
lapply(x, function(elt) elt[,1])
lapply (x, mean)
x <- list(a = 1:5, b=rnorm(10), c=rnorm(20,1), d=rnorm(100,5))
lapply (x, mean)
sapply(x, mea)
sapply(x, mean)
apply(x, 2, mean)
x <- matrix(rnorm(200), 20, 10)
x
apply(x,1, mean)
a <- array (rnorm(2*2*10), c(2,2,10))
a```
a
apply(a, c(1,2), mean)
rowMeans(a, dims=2)
x <- c(rnorm(10), runif(10), rnorm(10,1))
f <- g1(3,10)
x <- c(rnorm(10), runif(10), rnorm(10,1))
f <- gl(3,10)
tapply(x, f, mean)
# first, create 3 distributions of data
x <- c(rnorm(10), runif(10), rnorm(10,1))
# now, create 3 levels of groups
f <- gl(3,10)
# find out the average of each group
tapply(x, f, mean)
tapply(x, f, mean, simplifiy = FALSE)
tapply(x, f, mean, simplify = FALSE)
tapply(x, f, range)
split (x,f)
sapply(split(x,f), mean)
library(datasets)
head(airquality)
lapply(s, function(x), colMeans(x[,c("Ozone", "Wind", "Temp")]))
s <- split (airquality, airquality$Month)
lapply(s, function(x), colMeans(x[,c("Ozone", "Wind", "Temp")]))
lapply(s, function(x) colMeans(x[,c("Ozone", "Wind", "Temp")]))
sapply(s, function(x) colMeans(x[,c("Ozone", "Wind", "Temp")]))
sapply(s, function(x) colMeans(x[,c("Ozone", "Wind", "Temp")], na.rm=TRUE))
interaction(gender, ethnicity)
x <- rnorm(10) # some random data
gender <-gl (2, 5)  # random genders
ethnicity <- gl (5,2) #random ethnicity
interaction(gender, ethnicity)
x <- rnorm(1000) # some random data
gender <-gl (2, 5)  # random genders
ethnicity <- gl (5,2) #random ethnicity
t
str(split(x, list(gender, ethnicity), drop=TRUE))
str(split(x, list(gender, ethnicity), drop=FALSE))
str(split(x, list(gender, ethnicity), drop=TRUE))
noise <- function(n, mean, sd) {
rnorm(n, mean, sd)
}
noise(5,1,2)
mapply(noise, 1:5, 1:5, 2)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
rnorm(2*2*10
)
matrix(rnorm(10), 2, 5)
makeCacheMatrix(matrix(rnorm(10), 2, 5))
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
a <- makeVector(c(1,2,3))
getmean(a)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
a <- makeVector(c(1,2,3))
getmean(a)
a$getmean()
a$get()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
makeCacheMatrix(matrix(rnorm(10), 2, 5))
m$set()
cacheMatrix <- function(x, ...) {
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmatrix(m)
m
}
cacheMatrix((matrix(rnorm(10), 2, 5))
cacheMatrix((matrix(rnorm(10), 2, 5)))
matrix <- (matrix(rnorm(10), 2, 5))
mymatrix <- (matrix(rnorm(10), 2, 5))
cacheMatrix(mymatrix)
cacheMatrix <- function(x, ...) {
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmatrix(m)
m
}
mymatrix <- (matrix(rnorm(10), 2, 5))
cacheMatrix(mymatrix)
makeSum <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(sum) m <<- sum
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeSum(1,2,3)
makeSum(c(1,2,3))
makeVector(c(1,2,3))
setmean$m
getmean$m
makeSum(c(1,2,3))
getmean$m
getmean$m
myMatrix
mymatrix
solve(mymatrix)
mymatrix <- (matrix(rnorm(9), 3, 3))
solve(mymatrix)
cacheMatrix(mymatrix)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
makeCacheMatrix(matrix(rnorm(10), 2, 5))
m$set()
cacheMatrix <- function(x, ...) {
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmatrix(m)
m
}
mymatrix <- (matrix(rnorm(9), 3, 3))
cacheMatrix(mymatrix)
makeCacheMatrix(mymatrix)
cacheMatrix(mymatrix)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function() m <<- solve(m)
getmatrix <- function() m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
cacheMatrix <- function(x, ...) {
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmatrix(m)
m
}
mymatrix <- (matrix(rnorm(9), 3, 3))
makeCacheMatrix(mymatrix)
cacheMatrix(mymatrix)
setwd(/Users/andreahutson/Dropbox/Needs Assessment Data_IDEA_2014/)
setwd(./Users/andreahutson/Dropbox/Needs Assessment Data_IDEA_2014/)
setwd("./Users/andreahutson/Dropbox/Needs Assessment Data_IDEA_2014/")
setwd("./Users/andreahutson/Dropbox/")
activity <- read.csv("activity.csv")
str(activity)
setwd("/Users/andreahutson/Dropbox/Classes/Reproducible Research/PeerAssessment1")
activity <- read.csv("activity.csv")
str(activity)
# create a list of all of the days in the data frame
days <- levels(activity$date)
# Calculate total number of steps in a day
dailySteps <- data.frame()
for (day in days) {
# subset by day
currentday <- subset(activity, activity$date == day)
# determine if there are any steps in day
complete <- sum(complete.cases(currentday))
# if any steps were taken that day, calculate the sum.
if (complete != 0) {
stepCount <- sum(currentday$steps, na.rm=TRUE)
} else {  # if not, stepcount is "NA"
stepCount <- NA
}
# bind total number of steps for the day to the day name
todaySteps <- cbind(day, stepCount)
todaySteps <- as.data.frame(todaySteps,
stringsAsFactors = FALSE)
#todaySteps$stepCount <- as.numeric(todaySteps$stepCount)
dailySteps <- rbind(dailySteps, todaySteps)
}
# change day to date; stepCount to numeric
dailySteps$day <- as.POSIXlt(dailySteps$day)
dailySteps$stepCount <- as.numeric(dailySteps$stepCount)
# Calculate steps by time of day
# First, find out how many intervals are in a day
tapply(activity$interval, activity$date, length)[1]
# Now loop through the time periods
intervals <- levels(as.factor(activity$interval))
intervalSteps <- data.frame()
for (interv in intervals) {
currentInterval <- subset(activity,
activity$interval == interv )
# determine if there are any steps in time period
complete <- sum(complete.cases(currentInterval))
# if any steps were taken in that interval,
# calculate the mean.
if (complete != 0) {
stepCount <- mean(currentInterval$steps,
na.rm=TRUE)
} else {  # if not, stepcount is "NA"
stepCount <- NA
}
# bind total number of steps for the
# interval to the interval name
intervSteps <- cbind(interv, stepCount)
intervSteps <- as.data.frame(intervSteps,
stringsAsFactors = FALSE)
intervalSteps <- rbind(intervalSteps, intervSteps)
}
#change all to numeric
intervalSteps$interv <- as.numeric(intervalSteps$interv)
intervalSteps$stepCount <- as.numeric(intervalSteps$stepCount)
str(intervalSteps)
library(ggplot2)
qplot(stepCount, data=dailySteps, binwidth = 1000)
mean(dailySteps$stepCount, na.rm = TRUE)
median(dailySteps$stepCount, na.rm = TRUE)
qplot(interv, stepCount, data=intervalSteps,geom = c("line"))
ggplot(interv, stepCount, data=intervalSteps, geom = c("point", "smooth"))
qplot(interv, stepCount, data=intervalSteps,geom = c("line"))
maxSteps <- max(intervalSteps$stepCount, na.rm = TRUE)
subset(intervalSteps, intervalSteps$stepCount == maxSteps)
``
sum(!complete.cases(activity))
newIntervalSteps <- data.frame()
# go through each interval, and replace blanks with NA.
for (interv in intervals) {
currentInterval <- subset(activity,
activity$interval == interv )
meanSteps <- mean(currentInterval$steps, na.rm=TRUE)
for (i in 1:61) {
if (is.na(currentInterval$steps[i])) {
currentInterval$steps[i] = meanSteps
}
}
# bind data frame
newIntervalSteps <- rbind(newIntervalSteps, currentInterval)
}
# change date to POSIT
newIntervalSteps$date <- as.POSIXlt(newIntervalSteps$date)
View(newIntervalSteps)
# Calculate total number of steps in a day
newDailySteps <- data.frame()
for (day in days) {
# subset by day
currentday <- subset(newIntervalSteps, newIntervalSteps$date == day)
# count number of steps
stepCount <- sum(currentday$steps, na.rm=TRUE)
# bind total number of steps for the day to the day name
todaySteps <- cbind(day, stepCount)
todaySteps <- as.data.frame(todaySteps,
stringsAsFactors = FALSE)
newDailySteps <- rbind(newDailySteps, todaySteps)
}
View(newDailySteps)
newDailySteps <- data.frame()
for (day in days) {
print(day)
# subset by day
currentday <- subset(newIntervalSteps, newIntervalSteps$date == day)
# count number of steps
stepCount <- sum(currentday$steps, na.rm=TRUE)
# bind total number of steps for the day to the day name
todaySteps <- cbind(day, stepCount)
todaySteps <- as.data.frame(todaySteps,
stringsAsFactors = FALSE)
newDailySteps <- rbind(newDailySteps, todaySteps)
}
currentday <- subset(newIntervalSteps, newIntervalSteps$date == day)
View(currentday)
View(newIntervalSteps)
newIntervalSteps <- data.frame()
# go through each interval, and replace blanks with NA.
for (interv in intervals) {
currentInterval <- subset(activity,
activity$interval == interv )
meanSteps <- mean(currentInterval$steps, na.rm=TRUE)
for (i in 1:61) {
if (is.na(currentInterval$steps[i])) {
currentInterval$steps[i] = meanSteps
}
}
# bind data frame
newIntervalSteps <- rbind(newIntervalSteps, currentInterval)
}
currentday <- subset(newIntervalSteps, newIntervalSteps$date == day)
stepCount <- sum(currentday$steps, na.rm=TRUE)
for (day in days) {
# subset by day
currentday <- subset(newIntervalSteps, newIntervalSteps$date == day)
# count number of steps
stepCount <- sum(currentday$steps, na.rm=TRUE)
# bind total number of steps for the day to the day name
todaySteps <- cbind(day, stepCount)
todaySteps <- as.data.frame(todaySteps,
stringsAsFactors = FALSE)
newDailySteps <- rbind(newDailySteps, todaySteps)
}
View(newDailySteps)
# Calculate total number of steps in a day
newDailySteps <- data.frame()
for (day in days) {
# subset by day
currentday <- subset(newIntervalSteps, newIntervalSteps$date == day)
# count number of steps
stepCount <- sum(currentday$steps, na.rm=TRUE)
# bind total number of steps for the day to the day name
todaySteps <- cbind(day, stepCount)
todaySteps <- as.data.frame(todaySteps,
stringsAsFactors = FALSE)
newDailySteps <- rbind(newDailySteps, todaySteps)
}
# change day to date; stepCount to numeric
newDailySteps$day <- as.POSIXlt(newDailySteps$day)
newDailySteps$stepCount <- as.numeric(newDailySteps$stepCount)
calculateDailySteps <- function(activity) {
dailySteps <- data.frame()
for (day in days) {
# subset by day
currentday <- subset(activity, activity$date == day)
# determine if there are any steps in day
complete <- sum(complete.cases(currentday))
# if any steps were taken that day, calculate the sum.
if (complete != 0) {
stepCount <- sum(currentday$steps, na.rm=TRUE)
} else {  # if not, stepcount is "NA"
stepCount <- NA
}
# bind total number of steps for the day to the day name
todaySteps <- cbind(day, stepCount)
todaySteps <- as.data.frame(todaySteps,
stringsAsFactors = FALSE)
#todaySteps$stepCount <- as.numeric(todaySteps$stepCount)
dailySteps <- rbind(dailySteps, todaySteps)
}
# change day to date; stepCount to numeric
dailySteps$day <- as.POSIXlt(dailySteps$day)
dailySteps$stepCount <- as.numeric(dailySteps$stepCount)
return(dailySteps)
}
dailySteps <- calculateDailySteps (activity)
newDailySteps <- calculateDailySteps(newIntervalSteps)
str(newDailySteps)
qplot(stepCount, data=newDailySteps, binwidth = 1000)
mean(newDailySteps$stepCount)
median(newDailySteps$stepCount)
qplot(interval, steps, data=activity, geom = "line", stat="summary", fun.y = "mean")
qplot(interv, stepCount, data=intervalSteps,geom = c("line"))
intervalSteps <- calculateIntervalSteps(activity)
calculateIntervalSteps <- function(activity) {
intervalSteps <- data.frame()
for (interv in intervals) {
currentInterval <- subset(activity,
activity$interval == interv )
# determine if there are any steps in time period
complete <- sum(complete.cases(currentInterval))
# if any steps were taken in that interval,
# calculate the mean.
if (complete != 0) {
stepCount <- mean(currentInterval$steps,
na.rm=TRUE)
} else {  # if not, stepcount is "NA"
stepCount <- NA
}
# bind total number of steps for the
# interval to the interval name
intervSteps <- cbind(interv, stepCount)
intervSteps <- as.data.frame(intervSteps,
stringsAsFactors = FALSE)
intervalSteps <- rbind(intervalSteps, intervSteps)
}
#change all to numeric
intervalSteps$interv <- as.numeric(intervalSteps$interv)
intervalSteps$stepCount <- as.numeric(intervalSteps$stepCount)
return(intervalSteps)
}
intervalSteps <- calculateIntervalSteps(activity)
str(intervalSteps)
all <- convertDateTimetoPOSIX(all)
convertDateTimeToPOSIX <- function(dataframe) {
times <- vector()
for (i in all$interval) {  # for each time in the interval
if (i < 10) {  # if the time is 0-9, add '000' in front
time <- paste("000", i, sep = "")
} else if (i < 100) { # if the time is 10-99, add '00' in front
time <- paste ("00", i, sep="")
} else if (i < 1000) { # if the time is 100-999, add '0' in front
time <- paste("0", i, sep="")
} else {  # otherwise, the time stays the same, but convert to char
time <- as.character(i)
}
times <- rbind(times, time) # bind new time to times vector
}
# Put a colon in between the times to get them in the format HH:MM
first <- substr(times, 1, 2)  # first part of time
last <- substr(times, 3, 4)   # second part of time
alltime <- paste (first, ":", last, sep="")  # paste together
# Bind to "all" data frame
all <- cbind (all, alltime)
# Paste date and time together
all$datetime <- paste(all$date, all$alltime)
# Change to POSIX time
all$datetimePOSIX <- as.POSIXlt(strptime(all$datetime, "%Y-%m-%d %H:%M"))
# Order by time
all <-  all[order(all$date, all$interval),]
return(all)
}
all <- convertDateTimetoPOSIX(all)
all <- convertDateTimeToPOSIX(all)
all <- convertDateTimeToPOSIX(all)
